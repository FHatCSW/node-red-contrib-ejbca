const forge = require('node-forge');
const request = require('request');

module.exports = function (RED) {
    function EnrollKeystore(config) {
        RED.nodes.createNode(this, config);
        const node = this;

        node.on('input', function (msg, send, done) {

            var ejbcaConfigNode = RED.nodes.getNode(config.ejbcaConfig);
            var ejbcaConfigParsed = JSON.parse(ejbcaConfigNode.ejbcaConf);
            var tlsConfigNode = RED.nodes.getNode(config.tls);

            const api = "/ejbca/ejbca-rest-api/v1/certificate/enrollkeystore";


            if (ejbcaConfigParsed) {

                var final_url = ejbcaConfigParsed.profile.hostname + api;

                if (!((final_url.indexOf("http://") === 0) || (final_url.indexOf("https://") === 0))) {
                    final_url = "https://" + final_url;
                }

                const jsonPayload = {
                    key_alg: config["algorithm"],
                };

                if (config["algorithm"] === "ECDSA") {
                    jsonPayload.key_spec = config["ecdsa_curve"];
                } else if (config["algorithm"] === "RSA") {
                    jsonPayload.key_spec = config["rsa_bit_length"];
                } else {
                    node.error("Algorithm not available");
                }


                if (msg["username"] !== undefined) {
                    jsonPayload.username = msg["username"];
                    if (config["username"] !== undefined) {
                        node.warn(`configure-entity: username was overwritten by msg.username`);
                    }
                } else if (config["username"] !== undefined) {
                    jsonPayload.username = config["username"];
                } else {
                    node.error("Username not available");
                }


                if (msg["enrollment_code"] !== undefined) {
                    jsonPayload.password = msg["enrollment_code"];
                    if (this.credentials.enrollment_code !== undefined) {
                        node.warn(`configure-entity: enrollment_code was overwritten by msg.enrollment_code`);
                    }
                } else if (this.credentials.enrollment_code !== undefined) {
                    jsonPayload.password = this.credentials.enrollment_code;
                }
                if (ejbcaConfigParsed.profile.enrollment_code.auto_generated) {
                    delete jsonPayload.password;
                    node.warn(`enroll-pkcs10: Authentication code is auto generated by EJBCA. Your defined value is NOT used!`);
                }


                if (!tlsConfigNode || !tlsConfigNode.valid) {
                    node.error("Invalid or missing TLS configuration");
                    return;
                }

                const requestOptions = {
                    uri: final_url,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(jsonPayload),
                    agentOptions: tlsConfigNode.addTLSOptions({}) // Use the TLS options to configure the agent
                };

                request(requestOptions, function (error, response, body) {
                    if (error) {
                        node.error("An error occurred: " + error);
                        node.status({fill: "red", shape: "ring", text: error.code});
                    } else {
                        try {
                            const data = JSON.parse(body);
                            msg.enroll_pkcs10 = data;
                            node.status({fill: 'green', shape: 'dot', text: 'Success'});
                            send(msg);
                        } catch (jsonError) {
                            node.error("An error occurred: " + jsonError);
                            node.status({fill: "red", shape: "ring", text: jsonError.code});
                        }
                        done();
                    }
                });

            }

        });
    }

    RED.nodes.registerType('enroll-keystore', EnrollKeystore, {
        credentials: {
            enrollment_code: {type: "password"}
        }
    });
};
