const forge = require('node-forge');
const request = require('request');
const validateConfig = require('./resources/validate-config.js');
const resolveValue = require('./resources/resolve-value.js');
const extractEstError = require('./resources/extract-est-error');

module.exports = function (RED) {
    function EnrollPkcs10(config) {
        RED.nodes.createNode(this, config);
        var globalContext = this.context().global;
        var flowContext = this.context().flow;
        const node = this;

        this.fieldTypeusername = config.username_fieldType;
        this.username = config.username;
        this.fieldTypecsrInfo = config.csrInfo_fieldType;
        this.csrInfo = config.csrInfo;

        this.enrollment_code = config.enrollment_code;

        node.on('input', function (msg, send, done) {

                var ejbcaConfigNode = RED.nodes.getNode(config.ejbcaConfig);
                const validationResult = validateConfig(ejbcaConfigNode.ejbcaConf);
                let request_body;
                let headers;

                if (!msg.ejbca) {
                    msg.ejbca = {};
                }

                msg.ejbca.enroll_pkcs10 = {};

                if (validationResult !== null) {
                    node.error(`Invalid EJBCA config: ${validationResult}`);
                    return;
                }
                var ejbcaConfigParsed = JSON.parse(ejbcaConfigNode.ejbcaConf);
                var tlsConfigNode = RED.nodes.getNode(config.tls);

                const username = resolveValue(msg, this.fieldTypeusername, globalContext, flowContext, this.username);
                const certificate_request = resolveValue(msg, this.fieldTypecsrInfo, globalContext, flowContext, this.csrInfo);

                const rest_client = config.client_type === "REST";
                let api;

                if (ejbcaConfigParsed) {

                    if (rest_client) {
                        api = "/ejbca/ejbca-rest-api/v1/certificate/pkcs10enroll";
                    } else {
                        if (ejbcaConfigParsed.profile.est_alias) {
                            api = "/.well-known/est/" + ejbcaConfigParsed.profile.est_alias + "/simpleenroll";
                        } else {
                            node.error("Missing EST-alias in EJBCA-Config. Please define profile.est_alias");
                            return;
                        }
                    }

                    var final_url = ejbcaConfigParsed.profile.hostname + api;

                    if (!((final_url.indexOf("http://") === 0) || (final_url.indexOf("https://") === 0))) {
                        final_url = "https://" + final_url;
                    }

                    // Validate the CSR using node-forge
                    // try {
                    //     const csr = forge.pki.certificationRequestFromPem(certificate_request);
                    //     if (!csr.verify()) {
                    //         node.error("Invalid CSR signature");
                    //         return;
                    //     }
                    // } catch (error) {
                    //     node.error("Invalid CSR: " + error.message);
                    //     return;
                    // }

                    const jsonPayload = {
                        certificate_request: certificate_request,
                        certificate_profile_name: ejbcaConfigParsed.profile.certificate_profile_name,
                        end_entity_profile_name: ejbcaConfigParsed.profile.end_entity_profile_name,
                        certificate_authority_name: ejbcaConfigParsed.profile.certificate_authority_name,
                    };

                    if (!tlsConfigNode || !tlsConfigNode.valid) {
                        node.error("Invalid or missing TLS configuration");
                        return;
                    }
                    if (rest_client) {

                        if (!ejbcaConfigParsed.profile.username.auto_generated) {
                            jsonPayload.username = username;
                        } else {
                            node.warn("Username is auto generated by EJBCA");
                        }

                        if (ejbcaConfigParsed.profile.enrollment_code.required) {
                            const enrollmentCodeValue = this.enrollment_code;
                            jsonPayload.password = enrollmentCodeValue;
                            if (ejbcaConfigParsed.profile.enrollment_code.auto_generated) {
                                delete jsonPayload.password;
                                node.warn(`enroll-pkcs10: Authentication code is auto generated by EJBCA. Your defined value is NOT used!`);
                            }
                        }

                        headers = {
                            "Content-Type": "application/json",
                            'Accept': 'application/json'
                        };

                        request_body = JSON.stringify(jsonPayload);
                    } else {

                        headers = {
                            'Content-Type': 'application/pkcs10'
                        };

                        // Remove line breaks and other non-base64 characters
                        const certificateRequestCleaned = certificate_request
                            .replace(/-----BEGIN CERTIFICATE REQUEST-----/g, '')
                            .replace(/-----END CERTIFICATE REQUEST-----/g, '')
                            .replace(/\r/g, '')
                            .replace(/\n/g, '')
                            .replace(/\s/g, '');

                        // Encode the cleaned certificate request in base64
                        request_body = Buffer.from(certificateRequestCleaned, 'base64').toString('base64');
                    }

                    const requestOptions = {
                        uri: final_url,
                        method: "POST",
                        headers: headers,
                        body: request_body,
                        agentOptions: tlsConfigNode.addTLSOptions({}) // Use the TLS options to configure the agent
                    };

                    request(requestOptions, function (error, response, body) {
                            if (error) {
                                node.error("An error occurred in the request: " + error);
                                node.status({fill: "red", shape: "ring", text: error.code});
                            } else {
                                try {

                                    let data;
                                    if (rest_client) {
                                        if (response.statusCode >= 400) {
                                            // Handle HTTP error status codes (4xx, 5xx)
                                            node.error("HTTP Error: " + response.statusCode);
                                            node.status({
                                                fill: "red",
                                                shape: "ring",
                                                text: "HTTP Error: " + response.statusCode
                                            });
                                        }
                                        data = JSON.parse(body);
                                        msg.ejbca.enroll_pkcs10 = data;
                                    } else {

                                        // Check if the body contains an error message
                                        const errorMessage = extractEstError(body);
                                        if (errorMessage) {
                                            // Handle the error message
                                            node.error("Error Message: " + errorMessage);
                                            node.status({fill: "red", shape: "ring", text: "Error: " + errorMessage});
                                            return;
                                        }


                                        const object = forge.pkcs7.messageFromPem("-----BEGIN PKCS7-----\n" + body + "\n-----END PKCS7-----");

                                        const certAsn1 = forge.pki.certificateToAsn1(object.certificates[0]);

                                        var pem = forge.pki.certificateToPem(object.certificates[0]);

                                        // Remove the PEM header and footer
                                        const base64Cert = pem
                                            .replace(/-----BEGIN CERTIFICATE-----/g, '')
                                            .replace(/-----END CERTIFICATE-----/g, '')
                                            .replace(/\r/g, '')
                                            .replace(/\n/g, '')
                                            .replace(/\s/g, '');

                                        msg.ejbca.enroll_pkcs10.certificate = base64Cert;
                                        msg.ejbca.enroll_pkcs10.serial_number = "UNKNOWN";
                                        msg.ejbca.enroll_pkcs10.response_format = "UNKNOWN";
                                    }

                                    //console.error(msg.ejbca.enroll_pkcs10.certificate);
                                    node.status({fill: 'green', shape: 'dot', text: 'Success'});
                                    send(msg);
                                } catch
                                    (jsonError) {
                                    node.error("An error occurred in the transformation of the request: " + jsonError);
                                    node.status({fill: "red", shape: "ring", text: jsonError.code});
                                }
                                done();
                            }
                        }
                    )
                    ;

                }

            }
        )
        ;
    }

    RED.nodes.registerType('enroll-pkcs10', EnrollPkcs10);
};
