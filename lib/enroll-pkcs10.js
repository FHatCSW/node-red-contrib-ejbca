const forge = require('node-forge');
const request = require('request');
const validateConfig = require('./resources/validate-config.js');
const resolveValue = require('./resources/resolve-value.js');

module.exports = function (RED) {
    function EnrollPkcs10(config) {
        RED.nodes.createNode(this, config);
        var globalContext = this.context().global;
        var flowContext = this.context().flow;
        const node = this;

        this.fieldTypeusername = config.username_fieldType;
        this.username = config.username;
        this.fieldTypecsrInfo = config.csrInfo_fieldType;
        this.csrInfo = config.csrInfo;

        node.on('input', function (msg, send, done) {

            var ejbcaConfigNode = RED.nodes.getNode(config.ejbcaConfig);
            const validationResult = validateConfig(ejbcaConfigNode.ejbcaConf);

            if (!msg.ejbca) {
                msg.ejbca = {};
            }

            if (validationResult !== null) {
                node.error(`Invalid EJBCA config: ${validationResult}`);
                return;
            }
            var ejbcaConfigParsed = JSON.parse(ejbcaConfigNode.ejbcaConf);
            var tlsConfigNode = RED.nodes.getNode(config.tls);

            const username = resolveValue(msg, this.fieldTypeusername, globalContext, flowContext, this.username);
            const certificate_request = resolveValue(msg, this.fieldTypecsrInfo, globalContext, flowContext, this.csrInfo);

            const api = "/ejbca/ejbca-rest-api/v1/certificate/pkcs10enroll";


            if (ejbcaConfigParsed) {

                var final_url = ejbcaConfigParsed.profile.hostname + api;

                if (!((final_url.indexOf("http://") === 0) || (final_url.indexOf("https://") === 0))) {
                    final_url = "https://" + final_url;
                }

                // Validate the CSR using node-forge
                // try {
                //     const csr = forge.pki.certificationRequestFromPem(certificate_request);
                //     if (!csr.verify()) {
                //         node.error("Invalid CSR signature");
                //         return;
                //     }
                // } catch (error) {
                //     node.error("Invalid CSR: " + error.message);
                //     return;
                // }

                const jsonPayload = {
                    certificate_request: certificate_request,
                    certificate_profile_name: ejbcaConfigParsed.profile.certificate_profile_name,
                    end_entity_profile_name: ejbcaConfigParsed.profile.end_entity_profile_name,
                    certificate_authority_name: ejbcaConfigParsed.profile.certificate_authority_name,
                };

                if (!ejbcaConfigParsed.profile.username.auto_generated) {
                    jsonPayload.username = username;
                } else {
                    node.warn("Username is auto generated by EJBCA");
                }

                if (ejbcaConfigParsed.profile.enrollment_code.required) {
                    let enrollmentCodeValue = null;
                    if (msg["enrollment_code"] !== undefined) {
                        enrollmentCodeValue = msg["enrollment_code"];
                        if (config["authentication_code"] !== undefined) {
                            node.warn(`configure-entity: enrollment_code was overwritten by msg.enrollment_code`);
                        }
                    } else {
                        enrollmentCodeValue = this.credentials.enrollment_code;
                    }
                    jsonPayload.password = enrollmentCodeValue;
                    if (ejbcaConfigParsed.profile.enrollment_code.auto_generated) {
                        delete jsonPayload.password;
                        node.warn(`enroll-pkcs10: Authentication code is auto generated by EJBCA. Your defined value is NOT used!`);
                    }
                }

                if (!tlsConfigNode || !tlsConfigNode.valid) {
                    node.error("Invalid or missing TLS configuration");
                    return;
                }

                const requestOptions = {
                    uri: final_url,
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(jsonPayload),
                    agentOptions: tlsConfigNode.addTLSOptions({}) // Use the TLS options to configure the agent
                };

                request(requestOptions, function (error, response, body) {
                    if (error) {
                        node.error("An error occurred: " + error);
                        node.status({fill: "red", shape: "ring", text: error.code});
                    } else {
                        try {
                            const data = JSON.parse(body);
                            msg.ejbca.enroll_pkcs10 = data;
                            node.status({fill: 'green', shape: 'dot', text: 'Success'});
                            send(msg);
                        } catch (jsonError) {
                            node.error("An error occurred: " + jsonError);
                            node.status({fill: "red", shape: "ring", text: jsonError.code});
                        }
                        done();
                    }
                });

            }

        });
    }

    RED.nodes.registerType('enroll-pkcs10', EnrollPkcs10);
};
